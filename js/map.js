/**
 * MAP JS.
 *
 * The MAP JS is the main Javascript file that runs the map instance and does the autoflight.
 *
 * @author Pim Oude Veldhuis
 * @copyright 2014 OVS Development <OVSdev.com>
 * @license GNU General Public License, version 3
 */

var map;
var data;

var icon_airplane;
var autorefresh;
var autoflight;

var aircraftList    =   [];
var aircraftGroup;

var polyList        =   [];
var polyGroup;
var polyGroupAuto;

initMap();

/**
 * The initMap() function boots up the system, loads OSM and the icons, it also starts the other required functions
 */
function initMap() {
    //Locate Div#ID
    map = new L.Map('map');

    //Create the OSM tiles
    var tiles_url           =   'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    var tiles_copyright     =   'Map data &copy; <a href="http://openstreetmap.org" target="_blank">OpenStreetMap</a> | Flight Board &copy; <a href="http://www.ovsdev.com/projects/flightboard" target="_blank">OVSdev.com</a>';
    var tiles               =   new L.TileLayer(tiles_url, {minZoom: 2, maxZoom: 8, attribution: tiles_copyright});

    //Add OSM layers
    map.addLayer(tiles);

    //Create marker icon
    icon_airplane           =   new L.icon({iconUrl: 'images/airplane_icon.png', iconSize: [18, 18], iconAnchor: [9, 9], popupAnchor: [0, -9]});
    icon_airplane_ivao      =   new L.icon({iconUrl: 'images/airplane_icon_ivao.png', iconSize: [18, 18], iconAnchor: [9, 9], popupAnchor: [0, -9]});
    icon_airplane_vatsim    =   new L.icon({iconUrl: 'images/airplane_icon_vatsim.png', iconSize: [18, 18], iconAnchor: [9, 9], popupAnchor: [0, -9]});

    //Set map center to EHAM
    map.setView(new L.LatLng(52.3, 4.8), 3);

    //Start the other required functions
    getData();
    addAircraft();
    addPolylines();

    //Boot up the auto refresh of the data
    autorefresh         =   setInterval(autoRefresh, 63000);
}

/**
 * The autoRefresh() function refreshes the map with data every 63 seconds, it temporarely stops the autoFlight() function to prevent mishaps, the addAircraft starts it again
 */
function autoRefresh() {
    clearInterval(autoflight);

    getData();
    addAircraft();
    addPolylines();
}

/**
 * The getData() function basically updates the local JS data by a JSON file generated by PHP
 */
function getData() {
    $.ajax({
        url: 'json/map.php',
        async: false,
        dataType: 'json',
        success: function(callback) {
            data    =   callback;
        }
    });
}

/**
 * The addAircraft() functions reads the local data file and prompts all aircraft, it adds the airplane, heading, speed in meters per second (needed for locational functions) and the latlng key which contains the latitude and longitude of the moment of plotting it on the map. This last value is needed to update the polyline from the last plot point to it's current autoflight position.
 */
function addAircraft() {
    if(data != null) {
        aircraftList    =   [];

        $.each(data, function(i, flight) {
            var icon    =   icon_airplane;

            if(flight.CONN == 'ivao') {
                icon    =   icon_airplane_ivao;
            } else if(flight.CONN == 'vatsim') {
                icon    =   icon_airplane_vatsim;
            }

            aircraftList.push(new L.rotatedMarker([flight.latitude, flight.longitude], {icon: icon, angle: flight.heading, speed: (flight.groundspeed / 1.9438444924574), latlng: new L.LatLng(flight.latitude, flight.longitude)}).bindPopup(flight.callsign).on('mouseover', function(e) { this.openPopup() }).on('mouseout', function(e) { this.closePopup() }).on('click', function(e) { $("#popup").html(flight.route + '<p align="right">PIC: ' + flight.PIC + ' (' + flight.VID + ')</p>'); $("#popup").dialog(); $("#popup").dialog('option', 'title', 'FLIGHT ' + flight.callsign); }));
        });

        if(aircraftGroup != null)
            map.removeLayer(aircraftGroup);

        aircraftGroup   = L.layerGroup(aircraftList);
        map.addLayer(aircraftGroup);

        autoflight      =   setInterval(autoFlight, 1000);
    }
}

/**
 * The addPolylines() function adds the history line behind aircraft, the calcution is made so aircraft using timewarp ain't dislayed with map-wide polylines and due limitations in leaflet we remove dateline passing aircraft (the polyline starts at the dateline and can never cross it)
 */
function addPolylines() {
    if(data != null) {
        polyList    =   [];

        $.each(data, function(i, flight) {
            if(flight.history != null) {
                var polyArray   =   [];

                $.each(flight.history, function(j, history) {
                    if(j >= 1) {
                        var R           =   6371;

                        var lat_old     =   parseFloat(flight.history[j-1].latitude) * (Math.PI / 180);
                        var lat_new     =   parseFloat(history.latitude) * (Math.PI / 180);
                        var lat_delta   =   (history.latitude - flight.history[j-1].latitude) * (Math.PI / 180);
                        var lng_delta   =   (history.longitude - flight.history[j-1].longitude) * (Math.PI / 180);

                        var a = Math.sin(lat_delta / 2) * Math.sin(lat_delta / 2) + Math.cos(lat_old) * Math.cos(lat_new) * Math.sin(lng_delta / 2) * Math.sin(lng_delta / 2);
                        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                        var d = R * c;

                        if(d > 150)
                            polyArray   =   [];

                        if((history.longitude > 170 && flight.history[j-1].longitude < -170) || (history.longitude < -170 && flight.history[j-1].longitude > 170))
                            polyArray   =   [];
                    }

                    polyArray.push(new L.LatLng(history.latitude, history.longitude));
                });

                if(polyArray.length >= 2) {
                    polyList.push(L.polyline(polyArray, {color: '#959595', weight: 1, opacity: 0.8 }));
                }
            }
        });

        if(polyGroup != null)
            map.removeLayer(polyGroup);

        polyGroup   =   L.layerGroup(polyList);
        map.addLayer(polyGroup);
    }
}

/**
 * The autoFlight() function retrieves a list of all aircraft and calculates where it should be within the given timeFrame, it also generates a polyline from the latlng where the aircraft was originally plotted and it's current live position.
 */
function autoFlight() {
    if(aircraftList != null) {
        var polyListAuto    =   [];

        $.each(aircraftList, function(i, aircraft) {
            var dR          =   (aircraft.options.speed / 1000) / 6371;
            var bearing     =   parseInt(aircraft.options.angle) * (Math.PI / 180);

            var lat_old     =   parseFloat(aircraft.getLatLng().lat) * (Math.PI / 180);
            var lat_new     =   Math.asin(Math.sin(lat_old) * Math.cos(dR) + Math.cos(lat_old) * Math.sin(dR) * Math.cos(bearing));

            var lng_old     =   parseFloat(aircraft.getLatLng().lng) * (Math.PI / 180);
            var lng_new     =   lng_old + Math.atan2(Math.sin(bearing) * Math.sin(dR) * Math.cos(lat_old), Math.cos(dR) - Math.sin(lat_old) * Math.sin(lat_new));

            aircraft.setLatLng(new L.latLng((lat_new * (180 / Math.PI)), (lng_new * (180 / Math.PI))));
            aircraft.update();

            var polyArrayAuto   =   [];
            polyArrayAuto.push(aircraft.options.latlng);
            polyArrayAuto.push(new L.LatLng((lat_new * (180 / Math.PI)), (lng_new * (180 / Math.PI))));

            if(polyArrayAuto.length >= 2) {
                polyListAuto.push(L.polyline(polyArrayAuto, {color: '#959595', weight: 1, opacity: 0.8 }));
            }
        });

        if(polyGroupAuto != null)
            map.removeLayer(polyGroupAuto);

        polyGroupAuto   =   L.layerGroup(polyListAuto);
        map.addLayer(polyGroupAuto);
    }
}